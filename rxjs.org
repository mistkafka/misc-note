#+TITLE: Rxjs Note

* Table Of Contents
* Dictionary
  - observer [əb'zɜrvər]: n. 观察员；观察者；观察家；观测者 | 网络 观察者模式；观察家报；观察器
  - observable [əb'zɜrvəb(ə)l]: n. 值得注意的东西；感觉到[看得见]的事物；【物】可观察量；观察算符 | adj. 能看得到的；能察觉到的 | 网络 看得见的；可观察到的；可观测量
  - subscribe [səb'skraɪb]: v. 预订；申请；定期订购（或订阅等）；定期交纳（会员费） | 网络 签署；认购；捐助
  - subject ['sʌb.dʒekt]: n. 学科；主题；问题；话题 | adj. 取决于；可能受…影响的；易遭受…的；视…而定 | v. 使臣服；使顺从；（尤指）压服 | 网络 科目；主语；主体
  - creation [kri'eɪʃ(ə)n]: n. 创作；创造；创建；作品 | 网络 创新；创作物；造物弄人
  - combination [.kɑmbɪ'neɪʃ(ə)n]: n. 结合；联合；混合；结合体 | 网络 组合；混合性皮肤；合并
  - interval ['ɪntərvəl]: n. 间歇；音程；休息时间；（其他事情）穿插出现的间隙 | 网络 间隔；区间；时间间隔
* Basic Therory
  - obser
  - subscribe
* Operators
** Creation Operators
   Operators for creation.
*** from (ish: ObservableInput, mapFn: function, thisArg: any, scheduler: Scheduler): Observable
    Turn an array, promise, or iterable into a observable
    
    #+name: Example 1: Observable from array
    #+begin_src javascript
      const arraySource = Rx.Observable.from([1, 2, 3, 4, 5]);

      const subscribe = arraySource.subscribe(val => console.log(val));
    #+end_src
    
    #+name: Example 2: Observable from promise
    #+begin_src javascript
      const promiseSource = Rx.Observable.from(new Promise(resolve => resolve('hello, world!')));

      const subscribe = promiseSource.subscribe(val => console.log(val));
    #+end_src
    
*** of (...values, scheduler: Scheduler): Observable
    Emit variable amount of values in a sequence.
    
    #+name: Example 1: Emitting an object, array and function
    #+begin_src javascript
      const source = Rx.Observable.of({}, [1, 2, 3], function hello() {});
      const subscribe = source.subscribe(val => console.log(val));
      // {}, [1, 2, 3], function hello
    #+end_src
    
** Combination Operators
   Allow the joining of emmits from multiple observable.
 
*** concat (observables: ...*): Observable
    Subscribe to observables in order as previous completes, emit values.
    
    Note:
     - if throunghput order is not primary concern, try `merge' instead!
    
    #+name: Example 1: concat as instance method
    #+begin_src javascript
      const sourceOne = Rx.Observable.of(1, 2, 3);
      const sourceTwo = Rx.Observable.of(3, 2, 1);

      const example = sourceOne.concat(sourceTwo);
      const subscribe = example.subscribe(val => console.log(val));
      // ==> 1 2 3 3 2 1
    #+end_src
    
    #+name: Example 2: concat as static method
    #+begin_src javascript
      const startObs = Rx.Observable.of({
        status: 'loading'
      });

      const loadingPromise = new Promise((resolve, reject) => {
        // do ajax request, ba la ba la
      }).then((data) => {
        return {
          status: 'loaded',
          data: data
        }
      }).catch((msg) => {
        return {
          status: 'failed',
          message: msg
        }
      })

      const doLoadingObs = Rx.Observable.fromPromise(loadingPromise)

      const example = Rx.Observable.concat(
        startObs,                     // before loading, emit 'loading', UI show loading effect
        doLoadingObs                  // done, UI show data or report failed message
      )

    #+end_src

    #+name: Example 3: concat with source that doesn't complete
    #+begin_src javascript
      const neverStopObs = Rx.Observalbel.interval(1000);
      const neverRunObs = Rx.Observalbel.of('this', 'never', 'run');

      const example = Rx.concat(
        neverStopObs,
        neverRunObs
      )

      const subscribe = example.subscribe(val => console.log(val));
      // 1 2 3 4....
    #+end_src
    
*** combinationLatest
* Hot vs Cold Observables
  好久好久没有用rxjs了，最近业务需要来温习一下一些关键概念。

  把“producer的创建”在observable里面还是外面来作为Hot或者Cold的区分，这种做法不太妥当，看完这篇[[https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339#.8x9uam5rg][博客]]后，感觉最好还是理解得深入一点好。

  #+begin_quote
The act of subscription is the act of “calling” the observable like a function, and passing it an observer
  #+end_quote

  原文的这句可以作为理解的切入点：订阅的本质就是把observer作为参数，调用observable这个函数，（函数返回一个“取消订阅”的函数）。缩短了说就是：“订阅是一个函数调用过程”。

  举用原文的场景：订阅一个websocket的消息。

  我们可以这两种实现：
  1. 每一次订阅都新建一个websocket链接
  2. 多次订阅都是采用同一个websocket链接

  很显然，大部分场景下我们都希望是多次订阅共享同一个websocket链接的，这里可以把场景更具体化一点：你在实现一个邮件客户端，界面上有多个地方都需要订阅邮件更新这个websoket。

  多次订阅共享同一个数据源的observable，社区给它们取名Hot Observables，反之叫做Cold Observables。
  
* nested streams
  [[https://rangle.io/blog/thinking-in-nested-streams-with-rxjs/][Thinking in nested streams with RxJS]]
